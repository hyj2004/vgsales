import pandas as pd
import os
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文
plt.rcParams['axes.unicode_minus'] = False  # 正常显示负号
import numpy as np

#数据读取与预处理
os.chdir(r'C:\Users\86132\Desktop\学习\数据挖掘')
plt.style.use('ggplot')  #使用ggplot风格
na_values=['N/A']  #缺失值类型为N/A
df=pd.read_csv('vgsales.csv',na_values=na_values)
df=df.dropna(how='any',axis=0)

df_old = pd.read_csv('vgsales.csv')
print('原数据集共{}条数据'.format(len(df_old)))
# 计算原数据集中的缺失值数量
missing_values_count = df_old.isnull().sum().sum()
print('原数据集中缺失值共{}条'.format(missing_values_count))
# 删除包含缺失值的行
df_new = df_old.dropna(how='any', axis=0)
print('现数据集共有{}条数据'.format(len(df_new)))
# 如果你想确认新数据集中没有缺失值，可以检查：
if df_new.isnull().values.any():
    print("新数据集中仍然存在缺失值")
else:
    print("新数据集中没有缺失值")




# 查看游戏类别、发布平台、发行商类别数
# 统计游戏种类数量
types = pd.DataFrame(df_new['Genre'].value_counts())
# 可视化为条形图，设置参数
types.plot(kind='bar', alpha=0.8, color='Blue', figsize=(15, 9),
		   legend=False,
		   title='所有游戏种类的数量')
a = np.arange(len(df_new))  # 添加数据标签
for index, count in zip(a, types['Genre']):
	plt.text(index, count + 50, count, ha='center', va='bottom')
plt.show()

# 分别查看游戏类别、发布平台、发行商类别数的前五名
f, ax = plt.subplots(1, 3, figsize=(21, 6))
types = pd.DataFrame(df_new['Genre'].value_counts()[:5])  # 统计游戏种类前五名
platform = pd.DataFrame(df_new['Platform'].value_counts()[:5])  # 统计发布平台前五名
publisher = pd.DataFrame(df_new['Publisher'].value_counts()[:5])  # 统计发行商前五名

a = np.arange(len(types))
b = np.arange(len(platform))
c = np.arange(len(publisher))

# 可视化
types.plot(kind='bar',
		   alpha=0.6, color='Blue',
		   title='前五名游戏类别', ax=ax[0])
for index, count in zip(a, types['Genre']):
	ax[0].text(index, count + 50, count, ha='center', va='center')

platform.plot(kind='bar',
			  alpha=0.6, color='red',
			  title='前五名发布平台', ax=ax[1])
for index, count in zip(b, platform['Platform']):
	ax[1].text(index, count + 30, count, ha='center', va='center')

publisher.plot(kind='bar',
			   alpha=0.6, color='Green',
			   title='前五名发行商', ax=ax[2])
for index, count in zip(b, publisher['Publisher']):
	ax[2].text(index, count + 20, count, ha='center', va='center')
plt.show()

#查看受欢迎的游戏类型、平台、发行商
f, ax = plt.subplots(1, 3, figsize=(12, 8))
# 分组统计，并按全球销量降序排列,取前五名
types = pd.DataFrame(df.groupby('Genre').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

platform = pd.DataFrame(df.groupby('Platform').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

publisher = pd.DataFrame(df.groupby('Publisher').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

font = {
    'family': 'DejaVu Sans',
    'weight': 'normal',
    'size': 12
}
types.plot(kind='bar',
           alpha=0.6, color='Yellow',
           title='前五名游戏类型的销量',
           ax=ax[0], legend=False)
ax[0].set_ylabel('Genre_Sales', font)

platform.plot(kind='bar',
              alpha=0.6, color='red',
              title='前五名游戏平台的销量',
              ax=ax[1], legend=False)
ax[1].set_ylabel('Platform_Sales', font)

publisher.plot(kind='bar',
               alpha=0.6, color='Green',
               title='前五名游戏发行商的销量',
               ax=ax[2], legend=False)
ax[2].set_ylabel('Publisher_Sales', font)

plt.subplots_adjust(wspace=0.3)  # 调整各个子图横向间距

#绘制环形图：不同游戏种类的受欢迎程度
sales = df.copy()
genre = pd.DataFrame(sales['Genre'].value_counts())
fig = plt.figure(), plt.pie(np.array(genre).ravel(), labels = genre.index, autopct = '%1.1f%%', counterclock = False, wedgeprops = {'width' : 0.4}),plt.title("不同游戏受欢迎程度")
plt.show()


#查看受欢迎的游戏类型、平台、发行商
f, ax = plt.subplots(1, 3, figsize=(12, 8))
# 分组统计，并按全球销量降序排列,取前五名
types = pd.DataFrame(df.groupby('Genre').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

platform = pd.DataFrame(df.groupby('Platform').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

publisher = pd.DataFrame(df.groupby('Publisher').
            agg({'Global_Sales': np.sum})).sort_values(by='Global_Sales',
            ascending=False)[:5]

font = {
    'family': 'DejaVu Sans',
    'weight': 'normal',
    'size': 12
}
types.plot(kind='bar',
           alpha=0.6, color='Yellow',
           title='前五名游戏类型的销量',
           ax=ax[0], legend=False)
ax[0].set_ylabel('Genre_Sales', font)

platform.plot(kind='bar',
              alpha=0.6, color='red',
              title='前五名游戏平台的销量',
              ax=ax[1], legend=False)
ax[1].set_ylabel('Platform_Sales', font)

publisher.plot(kind='bar',
               alpha=0.6, color='Green',
               title='前五名游戏发行商的销量',
               ax=ax[2], legend=False)
ax[2].set_ylabel('Publisher_Sales', font)

plt.subplots_adjust(wspace=0.3)  # 调整各个子图横向间距

#绘制环形图：不同游戏种类的受欢迎程度
sales = df.copy()
genre = pd.DataFrame(sales['Genre'].value_counts())
fig = plt.figure(), plt.pie(np.array(genre).ravel(), labels = genre.index, autopct = '%1.1f%%', counterclock = False, wedgeprops = {'width' : 0.4}),plt.title("不同游戏受欢迎程度")
plt.show()

#按地区，查看受欢迎的游戏类型
data=df.pivot_table(index='Genre',
                    values=['JP_Sales','EU_Sales',
                    'NA_Sales','Global_Sales'],
                    aggfunc=np.sum,)

data['NA_prop']=data['NA_Sales']/data['Global_Sales']
data['JP_prop']=data['JP_Sales']/data['Global_Sales']
data['EU_prop']=data['EU_Sales']/data['Global_Sales']

f,ax=plt.subplots(figsize=(12,8))
index=np.arange(len(data))
minColor = ['red']
midColor = ['blue']
maxColor = ['green']

#绘制柱形图
plt.bar(index,data.NA_prop,color=minColor)
plt.bar(
        index,data.JP_prop,
        bottom=data.NA_prop,
        color=midColor
        )
plt.bar(
        index,data.EU_prop,
        bottom=data.NA_prop,
        color=maxColor
        )
font = {
    'family':'SimHei',
    'weight':'normal',
    'size': 12
}
plt.xticks(index,data.index,rotation=90)
plt.title('不同区域的比例',font)
plt.ylabel('销售额',font)
plt.legend(['北美销售额','日本销售额','欧洲销售额'],
loc='upper center',ncol=3,framealpha=0.6)
plt.show()

#按地区，查看受欢迎的游戏平台
data=df.pivot_table(index='Platform',
                    values=['JP_Sales','EU_Sales',
                    'NA_Sales','Global_Sales'],
                    aggfunc=np.sum,)

data['NA_prop']=data['NA_Sales']/data['Global_Sales']
data['JP_prop']=data['JP_Sales']/data['Global_Sales']
data['EU_prop']=data['EU_Sales']/data['Global_Sales']

f,ax=plt.subplots(figsize=(12,8))
index=np.arange(len(data))
minColor =['red']
midColor = ['blue']
maxColor = ['green']

#绘制堆积柱形图
plt.bar(index,data.NA_prop,color=minColor)
plt.bar(
        index,data.JP_prop,
        bottom=data.NA_prop,
        color=midColor
        )
plt.bar(
        index,data.EU_prop,
        bottom=data.NA_prop,
        color=maxColor
        )
font = {
    'family':'SimHei',
    'weight':'normal',
    'size': 12
}
plt.xticks(index, data.index, rotation=90)
plt.title('The Proportion of Different Areas', font)
plt.ylabel('Proportion', font)
plt.legend(['NA_Sales', 'JP_Sales', 'EU_Sales'],
           loc='upper center', ncol=3, framealpha=0.8)
plt.show()





#预测
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
# 创建按年份分组并求和的新数据框
new_data = pd.DataFrame(df.groupby('Year').agg({'Global_Sales': np.sum}))
new_data.index.name = 'Year'  # 确保索引名是'Year'
# 去除2020年的数据
new_data = new_data.drop(new_data.index[38])
# 绘制原始时间序列图
plt.figure(figsize=(10, 5))
plt.plot(new_data['Global_Sales'], label='原始销售',color='green')
plt.title('原始销售随时间变化')
plt.xlabel('年份')
plt.ylabel('全球销售额')
plt.legend()
plt.show()
# 做一阶差分
diff_data = new_data['Global_Sales'].diff().dropna()
# 绘制差分后的时间序列图
#plt.figure(figsize=(10, 5))
plt.plot(diff_data, label='差分后销售额',color='green')
plt.title('差分后销售额随时间变化')
plt.xlabel('年份')
plt.ylabel('全球销售额')
plt.legend()
plt.show()
# 平稳性检验
ADF_result = adfuller(diff_data)
print('一阶差分后序列ADF检验P值为: {}'.format(ADF_result[1]))
# 绘制ACF和PACF图
#plt.figure(figsize=(12, 8))
plot_acf(diff_data, lags=15,color='green')
plt.title('自相关函数')
plt.show()
#plt.figure(figsize=(10, 5))
plot_pacf(diff_data, lags=15,color='green')
plt.title('偏自相关函数')
plt.show()

from statsmodels.tsa.statespace.sarimax import SARIMAX
from datetime import datetime
# 修改浮点数索引为日期索引
rounded_index_values = np.round(new_data.index).astype(int)
start_date = datetime(2020, 1, 1)
new_index = pd.to_datetime(start_date) + pd.to_timedelta(rounded_index_values, unit='s')
new_data.index = new_index
# 创建并拟合模型
model = SARIMAX(new_data['Global_Sales'], order=(1, 0, 0))
results = model.fit()
# 预测未来值
n_steps = 10
forecast_steps = results.forecast(steps=n_steps)
# 创建预测值的索引
last_date = new_data.index[-1]
forecast_dates = pd.date_range(start=last_date, periods=n_steps, freq='A')
forecast_series = pd.Series(forecast_steps.values, index=forecast_dates)
# 绘制包含预测值的时序图
plt.figure(figsize=(10, 5))
plt.plot(new_data.index, new_data['Global_Sales'], label='实际销量')
plt.plot(forecast_dates, forecast_series, label='预测销量', linestyle='--', marker='+',color='green')
plt.title('实际与预测销量随时间变化')
plt.xlabel('年份')
plt.ylabel('全球销量（百万美元）')
plt.legend()
plt.grid(True)
plt.show()
# 打印最后的预测值
print("未来{}年的销量预测值：\n{}".format(n_steps, forecast_series))


#不同时间段受欢迎的游戏数量变化
bins=[1980,1985,1990,1995,2000,2005,2010,2015,2021]#数组左闭右开
cats=pd.cut(df['Year'],bins,right=False)#将数据进行分箱，每五年一个时间段

quantity_games=pd.DataFrame(pd.value_counts(cats))
quantity_games

quantity = quantity_games.sample(frac = 1)#对所有行进行随机排序

plt.rcParams['font.sans-serif'] = ['SimHei']  # 指定默认字体
plt.rcParams['axes.unicode_minus'] = False

fig = plt.figure(), plt.pie(np.array(quantity).ravel(), labels = quantity.index, autopct = '%1.1f%%', counterclock = False);
plt.axis('square')
plt.title('不同时间段发行受欢迎游戏数量占比')

#全球销量的时序变化
time=df.groupby('Year').agg({'Global_Sales':'sum'})

time.plot(alpha=0.6,figsize=(12,8),
         legend=False,color='Blue')

plt.xticks(np.arange(time.index.min(),   #调整横轴时间间隔
           time.index.max()),
           rotation=90)

font1={'family' : 'SimHei',
'weight' : 'normal',
'size'   : 12,
}
plt.title('全球销量变化图',font1)
plt.ylabel('全球销量（百万）',font1)

plt.vlines(time.idxmax(),0,          #添加垂线
           int(time['Global_Sales'].max()),
           linestyle='--',color='red')

plt.annotate('最高销售额是 {} 百万'.  #标注最高销量
             format(int(time.Global_Sales.max())),
             xy=(time.idxmax(),int(time.Global_Sales.max())),
             xytext=(time.idxmax()+1,int(time.Global_Sales.max())+15),
             arrowprops=dict(color='red',headwidth=8,headlength=8),
             family='sans-serif')
plt.show()

#各地区销量变化（北美，日本，欧洲）
sales_NA=pd.DataFrame(df['NA_Sales'].groupby(sales['Year']).sum()).sort_values(by = 'Year')
plt = sales_NA.plot.bar(rot = 45, cmap = "Paired", fontsize = 8)
plt.set_ylabel('销售额', fontsize = 9)
plt.set_title('北美销售额随年份变化情况')
plt.show()

sales_JP = pd.DataFrame(df['JP_Sales'].groupby(sales['Year']).sum()).sort_values(by = 'Year')
plt = sales_JP.plot.bar(rot = 45, cmap = "Paired", fontsize = 8)
plt.set_ylabel('销售额', fontsize = 9)
plt.set_title('日本销售额随年份变化情况')
plt.show()

sales_EU=pd.DataFrame(df['EU_Sales'].groupby(sales['Year']).sum()).sort_values(by = 'Year')
plt = sales_EU.plot.bar(rot = 45, cmap = "Paired", fontsize = 8)
plt.set_ylabel('销售额', fontsize = 9)
plt.set_title('欧洲销售额随年份变化情况')
plt.show()

#按年汇总各地数据
data=df.pivot_table(index='Year',
                    values=['JP_Sales','EU_Sales',
                    'NA_Sales','Global_Sales'],
                    aggfunc=np.sum)
#计算比例
data['NA_prop']=data['NA_Sales']/data['Global_Sales']
data['JP_prop']=data['JP_Sales']/data['Global_Sales']
data['EU_prop']=data['EU_Sales']/data['Global_Sales']
f,ax=plt.subplots(figsize=(12,8))
index=np.arange(len(data))
minColor = (117/256,79/256,68/256)
midColor = (236/256,115/256,87/256)
maxColor = (253/256,214/256,146/256)
plt.bar(index,data.NA_prop,color=minColor)
plt.bar(
        index,data.JP_prop,
        bottom=data.NA_prop, #通过bottom来设置这个柱子距离底部的高度
        color=midColor
        )
plt.bar(
        index,data.EU_prop,
        bottom=data.NA_prop, #通过bottom来设置这个柱子距离底部的高度
        color=maxColor
        )
font={
    'family':'SimHei',
    'weight':'normal',
    'size':12
}
plt.xticks(index,data.index,rotation=90)
plt.title('不同地区销售额比例',font)
plt.ylabel('销售额比例',font)
plt.legend(['北美','日本','欧洲'],loc='upper center',ncol=3,framealpha=0.6)
plt.show()

f,ax=plt.subplots(figsize=(12,8))
plt.bar(index,data.NA_prop,color=minColor)
